#+TITLE: Frequent Message Detection
#+AUTHOR: Masaki Waga
#+EMAIL: mwaga@fos.kuis.kyoto-u.ac.jp
#+OPTIONS: toc:nil

This is an example to detect too frequent messages sent from the same address using [[https://github.com/MasWag/SyMon/][SyMon]]. This example consists of a Python script =convert_log.py= to clean up and construct a log file for SyMon and the files required by SyMon.

* Requirements

- [[https://github.com/MasWag/SyMon/][SyMon]]
- Python3
- Emacs
  - to tangle the resulting files from frequent.org

* Usage

The usage of the generated files is as follows:

#+BEGIN_SRC sh
  sudo cat /var/log/exim4/mainlog |
      ./convert_log.py |
      ./frequent.symon |
      ./pretty_print.sh
#+END_SRC

In the converted log, the timestamp is the duration since the beginning of the day in seconds.

You can re-generate =frequent.symon= by ~make~. You can also generate the document with ~make doc~

* Events

We monitor the following event:

- =arrival=: The event showing the message arrival. This is shown as =<== in the raw log.

Each =arrival= event is tied with a string =sender= corresponding to the sender's address. The corresponding signature for SyMon is as follows:

#+NAME: SIGNATURE
#+BEGIN_SRC symon
  signature arrival {
      sender: string;
  }
#+END_SRC

* Specification

What we want to do in the monitoring process is as follows:

- It waits for =arrival= from the (parameterized) address.
- After the =arrival=, it counts the =arrival= from the same address for 3 seconds.
- We report if the count is more than 10.

To represent this specification, we need a parametric string value representing the current sender's address and a counter of the number to arrivals.

#+NAME: VARIABLES
#+BEGIN_SRC symon
  var {
      current_sender: string;
      count: number;
  }
#+END_SRC

First, we ignore irrelevant arrivals.

#+NAME: IGNORE_BEFORE
#+BEGIN_SRC symon
  one_or_more {
      arrival(sender | | count := 0)
  }
#+END_SRC

Then, we count the number of the arrival from the same sender for 3 seconds, while ignoring arrival from other senders.

#+NAME: COUNT
#+BEGIN_SRC symon
  within (<= 3) {
      one_or_more {
          one_of {
              arrival( sender | sender != current_sender && count <= 10 )
          } or {
              arrival( sender | sender == current_sender && count <= 10 | count := count + 1 )
          }
      }
  }
#+END_SRC

Finally, we deem the message was too frequent if the total count is more than 10.

#+NAME: FINAL
#+BEGIN_SRC symon
  arrival( sender | count > 10 )
#+END_SRC

Overall, the following shows the specification.

#+BEGIN_SRC symon :tangle frequent.symon :noweb yes :shebang #!/usr/bin/env symon -dnf
<<VARIABLES>>

<<SIGNATURE>>

<<IGNORE_BEFORE>>;
<<COUNT>>;
<<FINAL>>
#+END_SRC

* Example Execution

Here is an example of the log generated by ~convert_log.py~.

#+BEGIN_SRC txt :tangle example.log
arrival	alice@example.com	0.0
arrival	bob@example.org	0.3
arrival	alice@example.com	0.5
arrival carol@example.net	0.7
arrival	alice@example.com	0.8
arrival	alice@example.com	1.0
arrival	bob@example.org	1.2
arrival	alice@example.com	1.5
arrival	alice@example.com	1.7
arrival	alice@example.com	1.9
arrival	carol@example.net	2.0
arrival	alice@example.com	2.2
arrival	alice@example.com	2.4
arrival	bob@example.org	2.5
arrival	alice@example.com	2.7
arrival	carol@example.net	2.9
arrival	alice@example.com	3.1
arrival	bob@example.org	3.25
arrival	alice@example.com	3.3
arrival	bob@example.org	3.4
#+END_SRC

Here is the command to run SyMon with a monitoring result:

#+BEGIN_SRC sh :results output replace :exports both
  cat example.log | 
      ./frequent.symon |
      ./pretty_print.sh
#+END_SRC

#+RESULTS:
: @3.400000.	(time-point 19)	sender: alice@example.com	count: 11
